{"/home/travis/build/npmtest/node-npmtest-standard/test.js":"/* istanbul instrument in package npmtest_standard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-standard/lib.npmtest_standard.js":"/* istanbul instrument in package npmtest_standard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_standard = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_standard = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-standard/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-standard && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_standard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_standard\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_standard.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_standard.rollup.js'] =\n            local.assetsDict['/assets.npmtest_standard.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_standard.__dirname + '/lib.npmtest_standard.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-standard/node_modules/standard/index.js":"var Linter = require('standard-engine').linter\nvar opts = require('./options')\n\nmodule.exports = new Linter(opts)\n","/home/travis/build/npmtest/node-npmtest-standard/node_modules/standard-engine/index.js":"module.exports.cli = require('./bin/cmd')\n\nmodule.exports.linter = Linter\n\nvar deglob = require('deglob')\nvar os = require('os')\nvar path = require('path')\nvar pkgConf = require('pkg-conf')\n\nvar HOME_OR_TMP = os.homedir() || os.tmpdir()\n\nvar DEFAULT_PATTERNS = [\n  '**/*.js',\n  '**/*.jsx'\n]\n\nvar DEFAULT_IGNORE = [\n  '**/*.min.js',\n  '**/bundle.js',\n  'coverage/**',\n  'node_modules/**',\n  'vendor/**'\n]\n\nfunction Linter (opts) {\n  if (!(this instanceof Linter)) return new Linter(opts)\n  if (!opts) opts = {}\n\n  this.cmd = opts.cmd || 'standard'\n  this.eslint = opts.eslint\n  this.cwd = opts.cwd\n  if (!this.eslint) throw new Error('opts.eslint option is required')\n  this.customParseOpts = opts.parseOpts\n\n  this.eslintConfig = Object.assign({\n    cache: true,\n    cacheLocation: path.join(HOME_OR_TMP, '.standard-cache/'),\n    envs: [],\n    fix: false,\n    globals: [],\n    ignore: false,\n    plugins: [],\n    useEslintrc: false\n  }, opts.eslintConfig)\n}\n\n/**\n * Lint text to enforce JavaScript Style.\n *\n * @param {string} text                   file text to lint\n * @param {Object=} opts                  options object\n * @param {boolean=} opts.fix             automatically fix problems\n * @param {Array.<string>=} opts.globals  custom global variables to declare\n * @param {Array.<string>=} opts.plugins  custom eslint plugins\n * @param {Array.<string>=} opts.envs     custom eslint environment\n * @param {string=} opts.parser           custom js parser (e.g. babel-eslint)\n * @param {string=} opts.filename         path of the file containing the text being linted\n */\nLinter.prototype.lintTextSync = function (text, opts) {\n  opts = this.parseOpts(opts)\n  return new this.eslint.CLIEngine(opts.eslintConfig).executeOnText(text, opts.filename)\n}\n\nLinter.prototype.lintText = function (text, opts, cb) {\n  if (typeof opts === 'function') return this.lintText(text, null, opts)\n  var result\n  try {\n    result = this.lintTextSync(text, opts)\n  } catch (err) {\n    return process.nextTick(cb, err)\n  }\n  process.nextTick(cb, null, result)\n}\n\n/**\n * Lint files to enforce JavaScript Style.\n *\n * @param {Array.<string>} files          file globs to lint\n * @param {Object=} opts                  options object\n * @param {Array.<string>=} opts.ignore   file globs to ignore (has sane defaults)\n * @param {string=} opts.cwd              current working directory (default: process.cwd())\n * @param {boolean=} opts.fix             automatically fix problems\n * @param {Array.<string>=} opts.globals  custom global variables to declare\n * @param {Array.<string>=} opts.plugins  custom eslint plugins\n * @param {Array.<string>=} opts.envs     custom eslint environment\n * @param {string=} opts.parser           custom js parser (e.g. babel-eslint)\n * @param {function(Error, Object)} cb    callback\n */\nLinter.prototype.lintFiles = function (files, opts, cb) {\n  var self = this\n  if (typeof opts === 'function') return self.lintFiles(files, null, opts)\n  opts = self.parseOpts(opts)\n\n  if (typeof files === 'string') files = [ files ]\n  if (files.length === 0) files = DEFAULT_PATTERNS\n\n  var deglobOpts = {\n    ignore: opts.ignore,\n    cwd: opts.cwd,\n    useGitIgnore: true,\n    usePackageJson: false\n  }\n\n  deglob(files, deglobOpts, function (err, allFiles) {\n    if (err) return cb(err)\n\n    var result\n    try {\n      result = new self.eslint.CLIEngine(opts.eslintConfig).executeOnFiles(allFiles)\n    } catch (err) {\n      return cb(err)\n    }\n\n    if (opts.fix) {\n      self.eslint.CLIEngine.outputFixes(result)\n    }\n\n    return cb(null, result)\n  })\n}\n\nLinter.prototype.parseOpts = function (opts) {\n  var self = this\n\n  if (!opts) opts = {}\n  opts = Object.assign({}, opts)\n  opts.eslintConfig = Object.assign({}, self.eslintConfig)\n  opts.eslintConfig.fix = !!opts.fix\n\n  if (!opts.cwd) opts.cwd = self.cwd || process.cwd()\n  var packageOpts = pkgConf.sync(self.cmd, { cwd: opts.cwd })\n\n  if (!opts.ignore) opts.ignore = []\n  addIgnore(packageOpts.ignore)\n  addIgnore(DEFAULT_IGNORE)\n\n  addGlobals(packageOpts.globals || packageOpts.global)\n  addGlobals(opts.globals || opts.global)\n\n  addPlugins(packageOpts.plugins || packageOpts.plugin)\n  addPlugins(opts.plugins || opts.plugin)\n\n  addEnvs(packageOpts.envs || packageOpts.env)\n  addEnvs(opts.envs || opts.env)\n\n  setParser(packageOpts.parser || opts.parser)\n\n  if (self.customParseOpts) {\n    var filepath = pkgConf.filepath(packageOpts)\n    var rootDir = filepath ? path.dirname(filepath) : opts.cwd\n    opts = self.customParseOpts(opts, packageOpts, rootDir)\n  }\n\n  function addIgnore (ignore) {\n    if (!ignore) return\n    opts.ignore = opts.ignore.concat(ignore)\n  }\n\n  function addGlobals (globals) {\n    if (!globals) return\n    opts.eslintConfig.globals = self.eslintConfig.globals.concat(globals)\n  }\n\n  function addPlugins (plugins) {\n    if (!plugins) return\n    opts.eslintConfig.plugins = self.eslintConfig.plugins.concat(plugins)\n  }\n\n  function addEnvs (envs) {\n    if (!envs) return\n    if (!Array.isArray(envs) && typeof envs !== 'string') {\n      // envs can be an object in `package.json`\n      envs = Object.keys(envs).filter(function (env) { return envs[env] })\n    }\n    opts.eslintConfig.envs = self.eslintConfig.envs.concat(envs)\n  }\n\n  function setParser (parser) {\n    if (!parser) return\n    opts.eslintConfig.parser = parser\n  }\n\n  return opts\n}\n","/home/travis/build/npmtest/node-npmtest-standard/node_modules/standard-engine/bin/cmd.js":"#!/usr/bin/env node\n\nmodule.exports = Cli\n\nvar minimist = require('minimist')\nvar getStdin = require('get-stdin')\n\nfunction Cli (opts) {\n  var standard = require('../').linter(opts)\n\n  opts = Object.assign({\n    cmd: 'standard-engine',\n    tagline: 'JavaScript Custom Style',\n    version: require('../package.json').version\n  }, opts)\n\n  var argv = minimist(process.argv.slice(2), {\n    alias: {\n      global: 'globals',\n      plugin: 'plugins',\n      env: 'envs',\n      help: 'h',\n      verbose: 'v'\n    },\n    boolean: [\n      'fix',\n      'help',\n      'stdin',\n      'verbose',\n      'version'\n    ],\n    string: [\n      'global',\n      'plugin',\n      'parser',\n      'env'\n    ]\n  })\n\n  // Unix convention: Command line argument `-` is a shorthand for `--stdin`\n  if (argv._[0] === '-') {\n    argv.stdin = true\n    argv._.shift()\n  }\n\n  if (argv.help) {\n    if (opts.tagline) console.log('%s - %s (%s)', opts.cmd, opts.tagline, opts.homepage)\n    console.log(`\nUsage:\n    ${opts.cmd} <flags> [FILES...]\n\n    If FILES is omitted, then all JavaScript source files (*.js, *.jsx) in the current\n    working directory are checked, recursively.\n\n    Certain paths (node_modules/, coverage/, vendor/, *.min.js, bundle.js, and\n    files/folders that begin with '.' like .git/) are automatically ignored.\n\n    Paths in a project's root .gitignore file are also automatically ignored.\n\nFlags:\n        --fix       Automatically fix problems\n    -v, --verbose   Show rule names for errors (to ignore specific rules)\n        --version   Show current version\n    -h, --help      Show usage information\n\nFlags (advanced):\n        --stdin     Read file text from stdin\n        --global    Declare global variable\n        --plugin    Use custom eslint plugin\n        --env       Use custom eslint environment\n        --parser    Use custom js parser (e.g. babel-eslint)\n    `)\n    process.exitCode = 0\n    return\n  }\n\n  if (argv.version) {\n    console.log(opts.version)\n    process.exitCode = 0\n    return\n  }\n\n  var lintOpts = {\n    fix: argv.fix,\n    globals: argv.global,\n    plugins: argv.plugin,\n    envs: argv.env,\n    parser: argv.parser\n  }\n\n  var stdinText\n\n  if (argv.stdin) {\n    getStdin().then(function (text) {\n      stdinText = text\n      standard.lintText(text, lintOpts, onResult)\n    })\n  } else {\n    standard.lintFiles(argv._, lintOpts, onResult)\n  }\n\n  function onResult (err, result) {\n    if (err) return onError(err)\n\n    if (argv.stdin && argv.fix) {\n      if (result.results[0].output) {\n        // Code contained fixable errors, so print the fixed code\n        process.stdout.write(result.results[0].output)\n      } else {\n        // Code did not contain fixable errors, so print original code\n        process.stdout.write(stdinText)\n      }\n    }\n\n    if (!result.errorCount && !result.warningCount) {\n      process.exitCode = 0\n      return\n    }\n\n    console.error('%s: %s (%s)', opts.cmd, opts.tagline, opts.homepage)\n\n    // Are any fixable rules present?\n    var isFixable = result.results.some(function (result) {\n      return result.messages.some(function (message) {\n        return !!message.fix\n      })\n    })\n\n    if (isFixable) {\n      console.error(\n        '%s: %s',\n        opts.cmd,\n        'Run `' + opts.cmd + ' --fix` to automatically fix some problems.'\n      )\n    }\n\n    result.results.forEach(function (result) {\n      result.messages.forEach(function (message) {\n        log(\n          '  %s:%d:%d: %s%s',\n          result.filePath, message.line || 0, message.column || 0, message.message,\n          argv.verbose ? ' (' + message.ruleId + ')' : ''\n        )\n      })\n    })\n\n    process.exitCode = result.errorCount ? 1 : 0\n  }\n\n  function onError (err) {\n    console.error(opts.cmd + ': Unexpected linter output:\\n')\n    console.error(err.stack || err.message || err)\n    console.error(\n      '\\nIf you think this is a bug in `%s`, open an issue: %s',\n      opts.cmd, opts.bugs\n    )\n    process.exitCode = 1\n  }\n\n  /**\n   * Print lint errors to stdout -- this is expected output from `standard-engine`.\n   * Note: When fixing code from stdin (`standard --stdin --fix`), the transformed\n   * code is printed to stdout, so print lint errors to stderr in this case.\n   */\n  function log () {\n    if (argv.stdin && argv.fix) {\n      arguments[0] = opts.cmd + ': ' + arguments[0]\n      console.error.apply(console, arguments)\n    } else {\n      console.log.apply(console, arguments)\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-standard/node_modules/standard-engine/node_modules/minimist/index.js":"module.exports = function (args, opts) {\n    if (!opts) opts = {};\n    \n    var flags = { bools : {}, strings : {}, unknownFn: null };\n\n    if (typeof opts['unknown'] === 'function') {\n        flags.unknownFn = opts['unknown'];\n    }\n\n    if (typeof opts['boolean'] === 'boolean' && opts['boolean']) {\n      flags.allBools = true;\n    } else {\n      [].concat(opts['boolean']).filter(Boolean).forEach(function (key) {\n          flags.bools[key] = true;\n      });\n    }\n    \n    var aliases = {};\n    Object.keys(opts.alias || {}).forEach(function (key) {\n        aliases[key] = [].concat(opts.alias[key]);\n        aliases[key].forEach(function (x) {\n            aliases[x] = [key].concat(aliases[key].filter(function (y) {\n                return x !== y;\n            }));\n        });\n    });\n\n    [].concat(opts.string).filter(Boolean).forEach(function (key) {\n        flags.strings[key] = true;\n        if (aliases[key]) {\n            flags.strings[aliases[key]] = true;\n        }\n     });\n\n    var defaults = opts['default'] || {};\n    \n    var argv = { _ : [] };\n    Object.keys(flags.bools).forEach(function (key) {\n        setArg(key, defaults[key] === undefined ? false : defaults[key]);\n    });\n    \n    var notFlags = [];\n\n    if (args.indexOf('--') !== -1) {\n        notFlags = args.slice(args.indexOf('--')+1);\n        args = args.slice(0, args.indexOf('--'));\n    }\n\n    function argDefined(key, arg) {\n        return (flags.allBools && /^--[^=]+$/.test(arg)) ||\n            flags.strings[key] || flags.bools[key] || aliases[key];\n    }\n\n    function setArg (key, val, arg) {\n        if (arg && flags.unknownFn && !argDefined(key, arg)) {\n            if (flags.unknownFn(arg) === false) return;\n        }\n\n        var value = !flags.strings[key] && isNumber(val)\n            ? Number(val) : val\n        ;\n        setKey(argv, key.split('.'), value);\n        \n        (aliases[key] || []).forEach(function (x) {\n            setKey(argv, x.split('.'), value);\n        });\n    }\n\n    function setKey (obj, keys, value) {\n        var o = obj;\n        keys.slice(0,-1).forEach(function (key) {\n            if (o[key] === undefined) o[key] = {};\n            o = o[key];\n        });\n\n        var key = keys[keys.length - 1];\n        if (o[key] === undefined || flags.bools[key] || typeof o[key] === 'boolean') {\n            o[key] = value;\n        }\n        else if (Array.isArray(o[key])) {\n            o[key].push(value);\n        }\n        else {\n            o[key] = [ o[key], value ];\n        }\n    }\n    \n    function aliasIsBoolean(key) {\n      return aliases[key].some(function (x) {\n          return flags.bools[x];\n      });\n    }\n\n    for (var i = 0; i < args.length; i++) {\n        var arg = args[i];\n        \n        if (/^--.+=/.test(arg)) {\n            // Using [\\s\\S] instead of . because js doesn't support the\n            // 'dotall' regex modifier. See:\n            // http://stackoverflow.com/a/1068308/13216\n            var m = arg.match(/^--([^=]+)=([\\s\\S]*)$/);\n            var key = m[1];\n            var value = m[2];\n            if (flags.bools[key]) {\n                value = value !== 'false';\n            }\n            setArg(key, value, arg);\n        }\n        else if (/^--no-.+/.test(arg)) {\n            var key = arg.match(/^--no-(.+)/)[1];\n            setArg(key, false, arg);\n        }\n        else if (/^--.+/.test(arg)) {\n            var key = arg.match(/^--(.+)/)[1];\n            var next = args[i + 1];\n            if (next !== undefined && !/^-/.test(next)\n            && !flags.bools[key]\n            && !flags.allBools\n            && (aliases[key] ? !aliasIsBoolean(key) : true)) {\n                setArg(key, next, arg);\n                i++;\n            }\n            else if (/^(true|false)$/.test(next)) {\n                setArg(key, next === 'true', arg);\n                i++;\n            }\n            else {\n                setArg(key, flags.strings[key] ? '' : true, arg);\n            }\n        }\n        else if (/^-[^-]+/.test(arg)) {\n            var letters = arg.slice(1,-1).split('');\n            \n            var broken = false;\n            for (var j = 0; j < letters.length; j++) {\n                var next = arg.slice(j+2);\n                \n                if (next === '-') {\n                    setArg(letters[j], next, arg)\n                    continue;\n                }\n                \n                if (/[A-Za-z]/.test(letters[j]) && /=/.test(next)) {\n                    setArg(letters[j], next.split('=')[1], arg);\n                    broken = true;\n                    break;\n                }\n                \n                if (/[A-Za-z]/.test(letters[j])\n                && /-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next)) {\n                    setArg(letters[j], next, arg);\n                    broken = true;\n                    break;\n                }\n                \n                if (letters[j+1] && letters[j+1].match(/\\W/)) {\n                    setArg(letters[j], arg.slice(j+2), arg);\n                    broken = true;\n                    break;\n                }\n                else {\n                    setArg(letters[j], flags.strings[letters[j]] ? '' : true, arg);\n                }\n            }\n            \n            var key = arg.slice(-1)[0];\n            if (!broken && key !== '-') {\n                if (args[i+1] && !/^(-|--)[^-]/.test(args[i+1])\n                && !flags.bools[key]\n                && (aliases[key] ? !aliasIsBoolean(key) : true)) {\n                    setArg(key, args[i+1], arg);\n                    i++;\n                }\n                else if (args[i+1] && /true|false/.test(args[i+1])) {\n                    setArg(key, args[i+1] === 'true', arg);\n                    i++;\n                }\n                else {\n                    setArg(key, flags.strings[key] ? '' : true, arg);\n                }\n            }\n        }\n        else {\n            if (!flags.unknownFn || flags.unknownFn(arg) !== false) {\n                argv._.push(\n                    flags.strings['_'] || !isNumber(arg) ? arg : Number(arg)\n                );\n            }\n            if (opts.stopEarly) {\n                argv._.push.apply(argv._, args.slice(i + 1));\n                break;\n            }\n        }\n    }\n    \n    Object.keys(defaults).forEach(function (key) {\n        if (!hasKey(argv, key.split('.'))) {\n            setKey(argv, key.split('.'), defaults[key]);\n            \n            (aliases[key] || []).forEach(function (x) {\n                setKey(argv, x.split('.'), defaults[key]);\n            });\n        }\n    });\n    \n    if (opts['--']) {\n        argv['--'] = new Array();\n        notFlags.forEach(function(key) {\n            argv['--'].push(key);\n        });\n    }\n    else {\n        notFlags.forEach(function(key) {\n            argv._.push(key);\n        });\n    }\n\n    return argv;\n};\n\nfunction hasKey (obj, keys) {\n    var o = obj;\n    keys.slice(0,-1).forEach(function (key) {\n        o = (o[key] || {});\n    });\n\n    var key = keys[keys.length - 1];\n    return key in o;\n}\n\nfunction isNumber (x) {\n    if (typeof x === 'number') return true;\n    if (/^0x[0-9a-f]+$/i.test(x)) return true;\n    return /^[-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?$/.test(x);\n}\n\n","/home/travis/build/npmtest/node-npmtest-standard/node_modules/standard/options.js":"var eslint = require('eslint')\nvar path = require('path')\nvar pkg = require('./package.json')\n\nmodule.exports = {\n  bugs: pkg.bugs.url,\n  cmd: 'standard',\n  eslint: eslint,\n  eslintConfig: {\n    configFile: path.join(__dirname, 'eslintrc.json')\n  },\n  homepage: pkg.homepage,\n  tagline: 'Use JavaScript Standard Style',\n  version: pkg.version\n}\n","/home/travis/build/npmtest/node-npmtest-standard/node_modules/standard/bin/cmd.js":"#!/usr/bin/env node\n\nif (process.version.match(/v(\\d+)\\./)[1] < 4) {\n  console.error('standard: Node v4 or greater is required. `standard` did not run.')\n} else {\n  var opts = require('../options')\n  require('standard-engine').cli(opts)\n}\n"}